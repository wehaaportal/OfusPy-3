#!/usr/bin/env python3
# -*- coding: utf-8 -*-
################################################################################
#
#   OfusPy3 - Ofuscador Python 
#   3.0.1a14
#   Pacheco, Matias W. <mwpacheco@outlook.es>
#   Copyright (c) 2024 Wehaa Portal Soft.
#   Licencia GPL-3.0
#
#   Â¡ADVERTENCIA! No modificar el contenido de este archivo.
#
################################################################################
import zlib, base64

base64_encoded = ""

salt_hex = base64_encoded[:32]
data_encoded = base64_encoded[32:]

assert len(salt_hex) == 32, "Invalid salt length"
assert all(c in '0123456789abcdef' for c in salt_hex), "Salt is not hexadecimal"

exec(zlib.decompress(base64.b64decode(data_encoded)))
